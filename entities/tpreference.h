#ifndef TPREFERENCE_H
#define TPREFERENCE_H
/**
*@author Tezine Technologies
*Machine generated. DO NOT EDIT THIS FILE!
**/
#include "QStringList"
#include "QDateTime"
#include "QVariant"
#include "cpplib_global.h"


/**
*@class TPreference
**/
class CPPLIB_EXPORT TPreference : public QObject {
	Q_OBJECT
	Q_PROPERTY(qint64 id READ getId WRITE setId USER true)
	Q_PROPERTY(QString config READ getConfig WRITE setConfig USER true)

public:
	Q_INVOKABLE TPreference(QObject *parent=0);
	~TPreference(){}
	static QMetaObject getMeta();
	Q_INVOKABLE TPreference(const TPreference &d) : QObject () { setData(d); }
	Q_INVOKABLE TPreference &operator=(const TPreference &d){ return setData(d); }
	Q_INVOKABLE bool operator== (const TPreference &other) const{ if(equal(other))return true;return false;}
	Q_INVOKABLE inline bool operator!= (const TPreference &other) const{ if(equal(other))return false;return true;}
	inline qint64 getId() const {return id;}
	void setId(qint64 d){id=d;}
	Q_INVOKABLE QString getConfig() const {return config;}
	void setConfig(const QString &d){config=d;}

protected:
	TPreference &setData(const TPreference &d){
		id=d.id;
		config=d.config;
		return *this;
	}
	bool equal(const TPreference &other) const {
		if(id!=other.id)return false;
		if(config!=other.config)return false;
		return true;
	}
	qint64 id;
	QString config;
};

Q_DECLARE_METATYPE(TPreference)
Q_DECLARE_METATYPE(TPreference*)
Q_DECLARE_METATYPE(QList<TPreference*>)
Q_DECLARE_METATYPE(QList<TPreference>)
#endif
